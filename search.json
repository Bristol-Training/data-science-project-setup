[
  {
    "objectID": "pages/01-initial-setup.html",
    "href": "pages/01-initial-setup.html",
    "title": "Initial Setup",
    "section": "",
    "text": "Here we show you how to:\nAll the commands you need for these steps are included in this page. A cheatsheet is also available for quick reference.\nIf you already have a project folder created, simply skip the folder creation step, and move into the existing folder.",
    "crumbs": [
      "Initial Setup (All projects)"
    ]
  },
  {
    "objectID": "pages/01-initial-setup.html#open-your-terminal",
    "href": "pages/01-initial-setup.html#open-your-terminal",
    "title": "Initial Setup",
    "section": "Open your Terminal",
    "text": "Open your Terminal\n\nWindowsMacLinux\n\n\nClick the Start menu, search for Commant Prompt, and click to open. When you open the application you should see a blinking cursor preceded by something like this:\nC:\\Users\\abc1234&gt;\nThe text before the cursor indicates what folder you are “in”.\n\n\n\n\n\n\nNote\n\n\n\nOn Windows, the program used to run terminal commands is called Command Prompt.\n\n\n\n\nClick the Launchpad (rocket icon), type Terminal, and press Enter to open it. You should see a prompt that looks like:\nabc1234@Macbook %\nThe text prior to the cursor has your user name and the a name for the computer. You are “in” the home directory. To see where this directory is located, type the command pwd, then click Enter.\n\n\nOpen your terminal by pressing Ctrl+Alt+T or searching for Terminal in your applications menu. You should see a prompt similar to:\nabc1234@Laptop:/\nThe text prior to the cursor has your user name and the a name for the computer. You are “in” the home directory. To see where this directory is located, type the command pwd, then click Enter.",
    "crumbs": [
      "Initial Setup (All projects)"
    ]
  },
  {
    "objectID": "pages/01-initial-setup.html#creating-a-folder",
    "href": "pages/01-initial-setup.html#creating-a-folder",
    "title": "Initial Setup",
    "section": "Creating a Folder",
    "text": "Creating a Folder\nThe commands to make a directory and navigate into it are the same for Windows, Mac, and Linux. To create a new folder and move into it, use the following commands in your Command Prompt/Terminal:\nmkdir my_project\nPress Enter.",
    "crumbs": [
      "Initial Setup (All projects)"
    ]
  },
  {
    "objectID": "pages/05-FAQs.html",
    "href": "pages/05-FAQs.html",
    "title": "Frequently Asked Questions (FAQs)",
    "section": "",
    "text": "Virtual environments help isolate your project’s dependencies from the rest of your system, ensuring that everyone working on the project uses the same package versions. This is essential for reproducible research, as it allows others to recreate your software environment and obtain the same results. Using a virtual environment also prevents conflicts between packages required for different projects.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "pages/05-FAQs.html#why-do-i-need-to-use-a-virtual-environment",
    "href": "pages/05-FAQs.html#why-do-i-need-to-use-a-virtual-environment",
    "title": "Frequently Asked Questions (FAQs)",
    "section": "",
    "text": "Virtual environments help isolate your project’s dependencies from the rest of your system, ensuring that everyone working on the project uses the same package versions. This is essential for reproducible research, as it allows others to recreate your software environment and obtain the same results. Using a virtual environment also prevents conflicts between packages required for different projects.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "pages/05-FAQs.html#why-does-every-project-need-to-be-in-a-separate-folder",
    "href": "pages/05-FAQs.html#why-does-every-project-need-to-be-in-a-separate-folder",
    "title": "Frequently Asked Questions (FAQs)",
    "section": "Why does every project need to be in a separate folder?",
    "text": "Why does every project need to be in a separate folder?\nEach project should be in its own folder to keep its files organized and separate from other projects. As a researcher, you will likely have a number of different projects, possibly each using different data/methods. Having different folders makes it easier to manage dependencies, avoid conflicts, and share the project with others. When using version control systems like Git, having a dedicated folder for each project simplifies tracking changes and collaborating with others.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "pages/05-FAQs.html#ive-heard-of-other-package-managers-in-python-conda-pip-uv-pixi-which-one-should-i-use-and-when",
    "href": "pages/05-FAQs.html#ive-heard-of-other-package-managers-in-python-conda-pip-uv-pixi-which-one-should-i-use-and-when",
    "title": "Frequently Asked Questions (FAQs)",
    "section": "I’ve heard of other package managers in python (conda, pip, uv, pixi), which one should I use and when?",
    "text": "I’ve heard of other package managers in python (conda, pip, uv, pixi), which one should I use and when?\nConda and Pip are the two most commonly used package managers in Python. Conda is often used for packages which have more complex dependencies, while Pip is the standard package manager for Python. Often, packages can be installed using either, but some packages may only be available through one of the package managers.\nUV is a newer package manager in the “Pip World”, while Pixi is a newer package manager in the Conda world. We like using them a little more than we like using Pip and Conda, that’s why we’ve recommended them here! For more details on their features, please see our resources page",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "pages/05-FAQs.html#why-do-we-use-jupyter-lab-instead-of-vs-code",
    "href": "pages/05-FAQs.html#why-do-we-use-jupyter-lab-instead-of-vs-code",
    "title": "Frequently Asked Questions (FAQs)",
    "section": "Why do we use Jupyter Lab instead of VS Code?",
    "text": "Why do we use Jupyter Lab instead of VS Code?\nWe use Jupyter Lab as our primary IDE because it provides a simple and focused environment for learning. Unlike VS Code, Jupyter Lab does not require extensions or additional setup, and it does not include AI support or advanced features that may distract beginners. Our goal is to help students concentrate on core programming concepts without unnecessary complexity.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "pages/05-FAQs.html#can-i-use-other-ides-for-my-training",
    "href": "pages/05-FAQs.html#can-i-use-other-ides-for-my-training",
    "title": "Frequently Asked Questions (FAQs)",
    "section": "Can I use other IDEs for my training?",
    "text": "Can I use other IDEs for my training?\nWhile you are free to experiment with other IDEs on your own, we recommend using jupyter lab while you follow along with our courses It will be easier for us to help you when something goes wrong, if we know the setup you are working with!",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "pages/05-FAQs.html#do-i-need-to-install-any-extensions-for-jupyter-lab",
    "href": "pages/05-FAQs.html#do-i-need-to-install-any-extensions-for-jupyter-lab",
    "title": "Frequently Asked Questions (FAQs)",
    "section": "Do I need to install any extensions for Jupyter Lab?",
    "text": "Do I need to install any extensions for Jupyter Lab?\nNo extensions are required. Jupyter Lab works out of the box for our course needs.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "pages/05-FAQs.html#who-can-i-contact-if-i-have-technical-issues",
    "href": "pages/05-FAQs.html#who-can-i-contact-if-i-have-technical-issues",
    "title": "Frequently Asked Questions (FAQs)",
    "section": "Who can I contact if I have technical issues?",
    "text": "Who can I contact if I have technical issues?\nPlease reach out to your instructor or teaching assistant for help with technical problems related to Jupyter Lab or the course setup.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "pages/03-R.html",
    "href": "pages/03-R.html",
    "title": "Setting up an R Project",
    "section": "",
    "text": "We recommend using Rstudio to work with R. Rstudio is an IDE (integrated development environment) that makes it easier to write and run R code. R itself is a powerful programming language for statistical computing and graphics. R needs to be downloaded first, then RStudio.",
    "crumbs": [
      "R"
    ]
  },
  {
    "objectID": "pages/03-R.html#creating-and-working-within-a-folder",
    "href": "pages/03-R.html#creating-and-working-within-a-folder",
    "title": "Setting up an R Project",
    "section": "Creating and Working Within a Folder",
    "text": "Creating and Working Within a Folder\nCreate a Project Folder - In RStudio, go to File &gt; New Project &gt; New Directory. - Name your folder (e.g., myproject) and choose a location. - Click Create Project.\n\nSet Working Directory\n\nRStudio automatically sets the working directory to your project folder, but just to make sure, type the following into the console, and press enter:\ngetwd()\nTo set manually:\nsetwd(\"/path/to/myproject\")\nYour Rstudio window should look as follows:\n\n\n\nRStudio Window\n\n\nThe console, shown in this window, is where you can type R commands and see the output immediately. This is good for interactive work, quick tests, and project setup. Simply type the R command you want to execute, and press enter to run it.\n\nWriting and Running R Scripts\nTo write longer pieces of code, you can create an R script. Go to File &gt; New File &gt; R Script. This opens a new tab where you can write and save your R code.\n::: ::: {.callout} ### RStudio Layout This will mean you have a script open in the top left pane of RStudio. You can write your R code here. The console should be below it, this is where you can see the output of your code or enter commands directly for exploration/experimentation. In the top right pane, you have your environment and history tabs. The environment tab shows you the variables and data frames you have created in your current R session. The history tab shows you a list of all the commands you have run in the console. And finally, in the bottom right pane, you have the files, plots, packages, and help tabs. The files tab shows you the files in your working directory. The plots tab shows you any plots you create. The packages tab shows you the R packages you have installed and loaded. And the help tab provides documentation for R functions and packages.\n:::\n\n\nRunning Code\nYou can run the code in the script by highlighting it and clicking the “Run” button or pressing Ctrl + Enter (Windows) or Cmd + Enter (Mac). You can also click the “Source” button to run the entire script.\nMake sure to save your script by going to File &gt; Save or pressing Ctrl + S (Windows) or Cmd + S (Mac). Save it in your project folder with a .R extension, for example, analysis.R.",
    "crumbs": [
      "R"
    ]
  },
  {
    "objectID": "pages/03-R.html#installing-and-managing-packages",
    "href": "pages/03-R.html#installing-and-managing-packages",
    "title": "Setting up an R Project",
    "section": "Installing and Managing Packages",
    "text": "Installing and Managing Packages\nFor package installation, you can use the install.packages() function. For example, to install the ggplot2 package, you would run:\ninstall.packages(\"ggplot2\")\nYou can install multiple packages at once by passing a character vector to install.packages(). For example:\ninstall.packages(c(\"ggplot2\", \"dplyr\", \"tidyr\"))\n\n\n\n\n\n\nBonus: Reproducible Environments in R (Not necessary, but encouraged!)\n\n\n\n\n\nMany people simply use the “install.packages()” function to install packages, but this does not ensure reproducibility. Instead, we recommend using the renv package to manage your R packages and their versions, and the DESCRIPTION file approach to record which packages you’ve installed. To install renv, run:\ninstall.packages(\"renv\")\nWe also recommend installing the usethis package to help manage your project. `usethis includes great functionality for creating R-projects which follow standards.\ninstall.packages(\"usethis\")\n\nInitialise Environment\n\nInitialize renv: This creates a new project environment. Essentially a folder where project specific packages are installed, a document that tracks the packages used in the project, and a way to reproduce the environment later.\nrenv::init()\nCreate a DESCRIPTION File: This is a standard file in R that contains metadata about your project. The document created by renv contains a really long list of all packages used in the project, and the packages that those packages depend on! The DESCRIPTION file contains just a list of the packages you installed, making it easier for people to see what you’ve done. The template can easily be created using this command\nusethis::use_description(check_name = FALSE)\nInstall Packages from and add them to the description\nusethis::use_package(\"ggplot2\")\nSnapshot the Environment: After you’ve installed all your packages and added them to the DESCRIPTION file, you can create a snapshot of your environment. This will record the exact versions of all packages used in your project.\nrenv::snapshot()\n\nThis workflow helps you organize your project, manage packages reproducibly, and share your setup with others.",
    "crumbs": [
      "R"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Project Setup Guidance",
    "section": "",
    "text": "This site provides guidance for setting up data science projects for the training we deliver, but also more generally when you begin to use python or R in your own work. We believe that the courses we deliver should teach you programming concepts, but also should set you up for using these tools for your research.\nMain Steps: Regardless of the language you are using, these are the key steps you need to follow when starting training, or creating a new data science project:\n\n\n\nProject Setup Diagram\n\n\nTo start setup immediately, click the button below:\nGet Started\nThis guide also includes:\n\nA Terminal Cheatsheet goes through some basics on using the terminal that you may find helpful\nWhy do we do it like this? See the FAQs\n\nThere are many approaches to setting up and using R/python, but we have used our experience in teaching and using these tools to come up with a project setup that is simple and flexible enough for anyone to do reproducible research. If you have any suggestions, please feel free to make suggestion here.\nSee here for more resources on environment management and setting up reproducible data science projects",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "pages/02-python.html",
    "href": "pages/02-python.html",
    "title": "Python Environment Setup",
    "section": "",
    "text": "In the previous section, we showed you how to open a terminal, create a folder, and move “into” the folder. You will need to do this for every data science project.\nNow that you are in this folder, you will want to install all the tools you need for your code to run, and to do your research. Virtual environments, which we create here, are a great way to keep all the tools you need organized alongside your code and separate from other projects.",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "pages/02-python.html#install-package-manager",
    "href": "pages/02-python.html#install-package-manager",
    "title": "Python Environment Setup",
    "section": "Install Package Manager",
    "text": "Install Package Manager\nPackage manager installation should only need to be done once on your computer.\nInstructions are included below. If you encounter any issues, see here for more installation methods to try. Or contact the JGI team.",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "pages/02-python.html#install-uv",
    "href": "pages/02-python.html#install-uv",
    "title": "Python Environment Setup",
    "section": "Install UV",
    "text": "Install UV\n\nWindowsMacLinux\n\n\nOpen your Command Prompt and run:\npowershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\nIf this still does not work, please see the UV installation instructions.\n\n\nOpen Terminal and run:\ncurl -Ls https://astral.sh/uv/install.sh | bash\n\n\nOpen Terminal and run:\ncurl -Ls https://astral.sh/uv/install.sh | bash\n\n\n\nAfter installation, check that uv is available by typing uv --version, then pressing enter. You may need to restart your terminal for the changes to take effect.",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "pages/02-python.html#move-into-project-directory",
    "href": "pages/02-python.html#move-into-project-directory",
    "title": "Python Environment Setup",
    "section": "Move into Project Directory",
    "text": "Move into Project Directory\nTo set up your Python environment, you need to be in your project directory. Follow these steps:\n\nOpen your terminal.\nCreate or navigate to your project directory.\n\nIf it is not clear how to do so, please refer to the previous section.\nTo check you are in the correct directory, enter the following command:\n\nWindowsMacLinux\n\n\ncd\n\n\npwd\n\n\npwd\n\n\n\n\nCreate a Virtual Environment\nEnter the following command to create a minimal virtual environment:\nuv init --bare\nThis will create a pyproject.toml file, which will record information on all of the packages you install in your virtual environment.\n\n\nInstall Packages\nFor all projects we need jupyterlab, this is where we edit code. This can be added to your project with this command:\nuv add jupyterlab\nFor the Introduction to Data Analysis in Python course, you would need the pandas and seaborn package. You can add these with:\nuv add pandas seaborn\nGenerally speaking, to add a package to your environment, you can use the following command:\nuv add &lt;package-name&gt;\nReplace &lt;package-name&gt; with the name of the package you want to install.",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "pages/02-python.html#opening-jupyterlab",
    "href": "pages/02-python.html#opening-jupyterlab",
    "title": "Python Environment Setup",
    "section": "Opening JupyterLab",
    "text": "Opening JupyterLab\nNow you can open JupyterLab with:\nuv run jupyter lab\nThis will take some time, and you will see text being printed in the terminal. Once JupyterLab is running, a browser window should pop open. This window should like similar to the image below.\n\n\n\nJupyterLab Window",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "pages/02-python.html#create-a-notebook",
    "href": "pages/02-python.html#create-a-notebook",
    "title": "Python Environment Setup",
    "section": "Create a Notebook",
    "text": "Create a Notebook\nTo create a notebook, click the “Notebook” icon in the JupyterLab launcher. The window should now look like this:\n\n\n\nJupyterLab Notebook, with key features highlighted with arrows and blue boxes.\n\n\nIn each cell, python code can be entered. It can be run by clicking the “Run” button or by pressing Shift + Enter.",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "pages/02-python.html#summary",
    "href": "pages/02-python.html#summary",
    "title": "Python Environment Setup",
    "section": "Summary",
    "text": "Summary\nWell done, you have created an interactive JupyterLab environment for your Python project! You should now be able to follow along with our Python courses.\nThe steps in this page are crucial for setting up your Python environment effectively, and we recommend you follow these for your own projects, as well as for our courses.",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "pages/06-resources.html",
    "href": "pages/06-resources.html",
    "title": "Resources",
    "section": "",
    "text": "Please see below for more resources on environment management and setting up reproducible data science projects:\n\nReproducible Data Science Project:\nUV: A more detailed tutorial on UV d2and its features, see here\nPixi: Pixi is another package manager, useful for conda packages. See here for a great tutorial.\n\nFor all of our course, please see our course directory"
  },
  {
    "objectID": "pages/04-terminal-cheatsheet.html",
    "href": "pages/04-terminal-cheatsheet.html",
    "title": "Terminal Cheatsheet",
    "section": "",
    "text": "A terminal is a text-based interface that lets you interact with your computer by typing commands. Instead of clicking through menus, you type instructions directly.\n\n\n\n\n\n\nNote\n\n\n\nOn Windows, the program used to run terminal commands is called Command Prompt.\n\n\n\nWindows: The terminal program is called Command Prompt. There is also Powershell, a more modern alternative (which has some different commands).\nMac: The terminal app is called Terminal.\nLinux: Most distributions include a Terminal application.",
    "crumbs": [
      "Terminal Cheatsheet"
    ]
  },
  {
    "objectID": "pages/04-terminal-cheatsheet.html#what-is-a-terminal",
    "href": "pages/04-terminal-cheatsheet.html#what-is-a-terminal",
    "title": "Terminal Cheatsheet",
    "section": "",
    "text": "A terminal is a text-based interface that lets you interact with your computer by typing commands. Instead of clicking through menus, you type instructions directly.\n\n\n\n\n\n\nNote\n\n\n\nOn Windows, the program used to run terminal commands is called Command Prompt.\n\n\n\nWindows: The terminal program is called Command Prompt. There is also Powershell, a more modern alternative (which has some different commands).\nMac: The terminal app is called Terminal.\nLinux: Most distributions include a Terminal application.",
    "crumbs": [
      "Terminal Cheatsheet"
    ]
  },
  {
    "objectID": "pages/04-terminal-cheatsheet.html#basic-terminal-commands",
    "href": "pages/04-terminal-cheatsheet.html#basic-terminal-commands",
    "title": "Terminal Cheatsheet",
    "section": "Basic Terminal Commands",
    "text": "Basic Terminal Commands\nHere are a few basic commands that work across most systems:\n\n\n\n\n\n\n\n\n\nCommand\nWindows\nMac/Linux\nDescription\n\n\n\n\nList files\ndir\nls\nShows files in the current folder\n\n\nChange folder\ncd foldername\ncd foldername\nMove into a folder\n\n\nGo up a folder\ncd ..\ncd ..\nMove up one level\n\n\nMake a folder\nmkdir name\nmkdir name\nCreate a new folder\n\n\nRemove a file\ndel file.txt\nrm file.txt\nDelete a file",
    "crumbs": [
      "Terminal Cheatsheet"
    ]
  },
  {
    "objectID": "pages/04-terminal-cheatsheet.html#why-use-terminal-commands",
    "href": "pages/04-terminal-cheatsheet.html#why-use-terminal-commands",
    "title": "Terminal Cheatsheet",
    "section": "Why Use Terminal Commands?",
    "text": "Why Use Terminal Commands?\nUsing basic terminal commands makes it easier to:\n\nNavigate projects: Quickly move between folders and files.\nRun scripts: Start Python or R scripts directly.\nManage environments: Create and activate virtual environments for Python or R.\nAutomate tasks: Use simple commands to install packages, update code, or clean up files.\n\nLearning a few terminal commands helps you work more efficiently and gives you more control over your Python and R projects.",
    "crumbs": [
      "Terminal Cheatsheet"
    ]
  }
]