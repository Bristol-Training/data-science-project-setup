[
  {
    "objectID": "pages/01-python.html",
    "href": "pages/01-python.html",
    "title": "Python Environment Setup",
    "section": "",
    "text": "Setting Up Your Python Environment\nTo ensure a reproducible and isolated Python environment for your project, you can use either UV (recommended) or Pixi as your package manager.\n\nUV (Recommended)Pixi\n\n\nUV is a fast Python package manager and environment tool.\n\nInstall UV\nIf you don’t have UV installed, run: sh     curl -Ls https://github.com/astral-sh/uv/releases/latest/download/uv-installer.sh | sh\nCreate a new environment\nsh     uv venv .venv\nActivate the environment\nsh     source .venv/bin/activate\nInstall packages\nFor example, to install numpy and pandas: sh     uv pip install numpy pandas\nFreeze dependencies\nsh     uv pip freeze &gt; requirements.txt\n\n\n\nPixi is a cross-platform package manager for Python and other languages.\n\nInstall Pixi\nsh     curl -fsSL https://pixi.sh/install.sh | bash\nInitialize a new project\nsh     pixi init\nAdd dependencies\nFor example, to add numpy and pandas: sh     pixi add numpy pandas\nActivate the environment\nsh     pixi shell",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "pages/02-R.html",
    "href": "pages/02-R.html",
    "title": "Data Science Project Setup",
    "section": "",
    "text": "Download and Install R\n\nVisit CRAN and download R for your operating system.\nFollow the installation instructions.\n\nDownload and Install RStudio\n\nVisit RStudio Download and download RStudio Desktop.\nInstall RStudio after installing R.",
    "crumbs": [
      "R"
    ]
  },
  {
    "objectID": "pages/02-R.html#installing-r-and-rstudio",
    "href": "pages/02-R.html#installing-r-and-rstudio",
    "title": "Data Science Project Setup",
    "section": "",
    "text": "Download and Install R\n\nVisit CRAN and download R for your operating system.\nFollow the installation instructions.\n\nDownload and Install RStudio\n\nVisit RStudio Download and download RStudio Desktop.\nInstall RStudio after installing R.",
    "crumbs": [
      "R"
    ]
  },
  {
    "objectID": "pages/02-R.html#creating-and-working-within-a-folder",
    "href": "pages/02-R.html#creating-and-working-within-a-folder",
    "title": "Data Science Project Setup",
    "section": "Creating and Working Within a Folder",
    "text": "Creating and Working Within a Folder\n\nCreate a Project Folder\n\nIn RStudio, go to File &gt; New Project &gt; New Directory.\nName your folder (e.g., myproject) and choose a location.\nClick Create Project.\n\nSet Working Directory\n\nRStudio automatically sets the working directory to your project folder.\nTo check:\ngetwd()\nTo set manually:\nsetwd(\"/path/to/myproject\")",
    "crumbs": [
      "R"
    ]
  },
  {
    "objectID": "pages/02-R.html#bonus-using-renv-for-package-management",
    "href": "pages/02-R.html#bonus-using-renv-for-package-management",
    "title": "Data Science Project Setup",
    "section": "Bonus: Using renv for Package Management",
    "text": "Bonus: Using renv for Package Management\n\nInitialize renv r     install.packages(\"renv\")     renv::init()\nCreate a DESCRIPTION File\n\nIn your project folder, create a file named DESCRIPTION with content like:\nPackage: myproject\nType: Project\nTitle: Example Project\nVersion: 0.1.0\nImports:\n      dplyr,\n      ggplot2\n\nInstall usethis and Use DESCRIPTION r     install.packages(\"usethis\")     usethis::use_description()\nInstall Packages from DESCRIPTION r     renv::install(\"dplyr\")     renv::install(\"ggplot2\")\nSnapshot the Environment r     renv::snapshot()\n\nThis workflow helps you organize your project, manage packages reproducibly, and share your setup with others.",
    "crumbs": [
      "R"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Project Setup Guidance",
    "section": "",
    "text": "This site provides comprehensive materials for setting up data science projects, tailored for both course delivery and general use. Whether you’re working with Python or R, you’ll find step-by-step instructions and best practices to help you start your project efficiently.\n\n\n\nGuidance for setting up Python projects\nGuidance for setting up R projects\nGeneral advice for organizing data science projects\nResources and templates for reproducible workflows\n\nExplore the sections to get started with your preferred language and learn how to structure your projects for success!",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#what-youll-find-here",
    "href": "index.html#what-youll-find-here",
    "title": "Project Setup Guidance",
    "section": "",
    "text": "Guidance for setting up Python projects\nGuidance for setting up R projects\nGeneral advice for organizing data science projects\nResources and templates for reproducible workflows\n\nExplore the sections to get started with your preferred language and learn how to structure your projects for success!",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "pages/03-terminal-cheatsheet.html",
    "href": "pages/03-terminal-cheatsheet.html",
    "title": "Terminal Cheatsheet",
    "section": "",
    "text": "A terminal (also called a command prompt on Windows) is a text-based interface that lets you interact with your computer by typing commands. Instead of clicking through menus, you type instructions directly.\n\nWindows: The terminal is called Command Prompt or PowerShell.\nMac: The terminal app is called Terminal.\nLinux: Most distributions include a Terminal application.",
    "crumbs": [
      "Terminal Cheatsheet"
    ]
  },
  {
    "objectID": "pages/03-terminal-cheatsheet.html#what-is-a-terminal-or-command-prompt",
    "href": "pages/03-terminal-cheatsheet.html#what-is-a-terminal-or-command-prompt",
    "title": "Terminal Cheatsheet",
    "section": "",
    "text": "A terminal (also called a command prompt on Windows) is a text-based interface that lets you interact with your computer by typing commands. Instead of clicking through menus, you type instructions directly.\n\nWindows: The terminal is called Command Prompt or PowerShell.\nMac: The terminal app is called Terminal.\nLinux: Most distributions include a Terminal application.",
    "crumbs": [
      "Terminal Cheatsheet"
    ]
  },
  {
    "objectID": "pages/03-terminal-cheatsheet.html#basic-terminal-commands",
    "href": "pages/03-terminal-cheatsheet.html#basic-terminal-commands",
    "title": "Terminal Cheatsheet",
    "section": "Basic Terminal Commands",
    "text": "Basic Terminal Commands\nHere are a few basic commands that work across most systems:\n\n\n\n\n\n\n\n\n\nCommand\nWindows\nMac/Linux\nDescription\n\n\n\n\nList files\ndir\nls\nShows files in the current folder\n\n\nChange folder\ncd foldername\ncd foldername\nMove into a folder\n\n\nGo up a folder\ncd ..\ncd ..\nMove up one level\n\n\nMake a folder\nmkdir name\nmkdir name\nCreate a new folder\n\n\nRemove a file\ndel file.txt\nrm file.txt\nDelete a file",
    "crumbs": [
      "Terminal Cheatsheet"
    ]
  },
  {
    "objectID": "pages/03-terminal-cheatsheet.html#why-use-terminal-commands",
    "href": "pages/03-terminal-cheatsheet.html#why-use-terminal-commands",
    "title": "Terminal Cheatsheet",
    "section": "Why Use Terminal Commands?",
    "text": "Why Use Terminal Commands?\nUsing basic terminal commands makes it easier to:\n\nNavigate projects: Quickly move between folders and files.\nRun scripts: Start Python or R scripts directly.\nManage environments: Create and activate virtual environments for Python or R.\nAutomate tasks: Use simple commands to install packages, update code, or clean up files.\n\nLearning a few terminal commands helps you work more efficiently and gives you more control over your Python and R projects.",
    "crumbs": [
      "Terminal Cheatsheet"
    ]
  },
  {
    "objectID": "pages/04-FAQs.html",
    "href": "pages/04-FAQs.html",
    "title": "Frequently Asked Questions (FAQs)",
    "section": "",
    "text": "We use Jupyter Lab as our primary IDE because it provides a simple and focused environment for learning. Unlike VS Code, Jupyter Lab does not require extensions or additional setup, and it does not include AI support or advanced features that may distract beginners. Our goal is to help students concentrate on core programming concepts without unnecessary complexity.\n\n\n\nWhile you are free to experiment with other IDEs on your own, all official coursework and assignments should be completed using Jupyter Lab to ensure consistency and compatibility.\n\n\n\nNo extensions are required. Jupyter Lab works out of the box for our course needs.\n\n\n\nNo, Jupyter Lab does not include built-in AI support. This helps you develop your own problem-solving skills.\n\n\n\nPlease reach out to your instructor or teaching assistant for help with technical problems related to Jupyter Lab or the course setup.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "pages/04-FAQs.html#why-do-we-use-jupyter-lab-instead-of-vs-code",
    "href": "pages/04-FAQs.html#why-do-we-use-jupyter-lab-instead-of-vs-code",
    "title": "Frequently Asked Questions (FAQs)",
    "section": "",
    "text": "We use Jupyter Lab as our primary IDE because it provides a simple and focused environment for learning. Unlike VS Code, Jupyter Lab does not require extensions or additional setup, and it does not include AI support or advanced features that may distract beginners. Our goal is to help students concentrate on core programming concepts without unnecessary complexity.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "pages/04-FAQs.html#can-i-use-other-ides-for-my-assignments",
    "href": "pages/04-FAQs.html#can-i-use-other-ides-for-my-assignments",
    "title": "Frequently Asked Questions (FAQs)",
    "section": "",
    "text": "While you are free to experiment with other IDEs on your own, all official coursework and assignments should be completed using Jupyter Lab to ensure consistency and compatibility.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "pages/04-FAQs.html#do-i-need-to-install-any-extensions-for-jupyter-lab",
    "href": "pages/04-FAQs.html#do-i-need-to-install-any-extensions-for-jupyter-lab",
    "title": "Frequently Asked Questions (FAQs)",
    "section": "",
    "text": "No extensions are required. Jupyter Lab works out of the box for our course needs.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "pages/04-FAQs.html#is-there-ai-assistance-available-in-jupyter-lab",
    "href": "pages/04-FAQs.html#is-there-ai-assistance-available-in-jupyter-lab",
    "title": "Frequently Asked Questions (FAQs)",
    "section": "",
    "text": "No, Jupyter Lab does not include built-in AI support. This helps you develop your own problem-solving skills.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "pages/04-FAQs.html#who-can-i-contact-if-i-have-technical-issues",
    "href": "pages/04-FAQs.html#who-can-i-contact-if-i-have-technical-issues",
    "title": "Frequently Asked Questions (FAQs)",
    "section": "",
    "text": "Please reach out to your instructor or teaching assistant for help with technical problems related to Jupyter Lab or the course setup.",
    "crumbs": [
      "FAQs"
    ]
  }
]